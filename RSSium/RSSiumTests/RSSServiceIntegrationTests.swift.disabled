import Testing
import Foundation
@testable import RSSium

struct RSSServiceIntegrationTests {
    
    let rssService = RSSService.shared
    
    @Test
    func parseRealRSS2Feed() async throws {
        let feedURL = "https://feeds.feedburner.com/TechCrunch"
        
        let channel = try await rssService.fetchAndParseFeed(from: feedURL)
        
        #expect(!channel.title.isEmpty)
        #expect(!channel.link.isEmpty)
        #expect(!channel.items.isEmpty)
        
        let firstItem = channel.items.first!
        #expect(!firstItem.title.isEmpty)
        #expect(firstItem.link != nil)
        if let link = firstItem.link {
            #expect(!link.isEmpty)
        }
        #expect(firstItem.pubDate != nil)
    }
    
    @Test
    func parseRealAtomFeed() async throws {
        let feedURL = "https://github.blog/feed/"
        
        let channel = try await rssService.fetchAndParseFeed(from: feedURL)
        
        #expect(!channel.title.isEmpty)
        #expect(!channel.link.isEmpty)
        #expect(!channel.items.isEmpty)
        
        let firstItem = channel.items.first!
        #expect(!firstItem.title.isEmpty)
        #expect(firstItem.link != nil)
        if let link = firstItem.link {
            #expect(!link.isEmpty)
        }
    }
    
    @Test
    func handleInvalidFeedURL() async throws {
        let invalidURL = "https://example.com/not-a-feed"
        
        await #expect(throws: RSSError.self) {
            try await rssService.fetchAndParseFeed(from: invalidURL)
        }
    }
    
    @Test
    func parseMultipleDateFormats() async throws {
        let feedURL = "https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml"
        
        let channel = try await rssService.fetchAndParseFeed(from: feedURL)
        
        #expect(!channel.items.isEmpty)
        
        let itemsWithDates = channel.items.filter { $0.pubDate != nil }
        #expect(!itemsWithDates.isEmpty)
    }
    
    @Test
    func handleNetworkTimeout() async throws {
        let slowFeedURL = "https://httpstat.us/200?sleep=35000"
        
        await #expect(throws: RSSError.self) {
            try await rssService.fetchAndParseFeed(from: slowFeedURL)
        }
    }
    
    @Test
    func parseRSSWithImages() async throws {
        let feedURL = "https://feeds.bbci.co.uk/news/rss.xml"
        
        let channel = try await rssService.fetchAndParseFeed(from: feedURL)
        
        #expect(!channel.items.isEmpty)
        
        let itemsWithContent = channel.items.filter { 
            $0.description != nil && !($0.description ?? "").isEmpty
        }
        #expect(!itemsWithContent.isEmpty)
    }
    
    @Test
    func validateRealFeedURLs() {
        let validURLs = [
            "https://feeds.feedburner.com/TechCrunch",
            "https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml",
            "http://feeds.bbci.co.uk/news/rss.xml",
            "https://github.blog/feed/"
        ]
        
        for url in validURLs {
            #expect(rssService.validateFeedURL(url))
        }
        
        let invalidURLs = [
            "not-a-url",
            "ftp://invalid.com/feed",
            "https://",
            ""
        ]
        
        for url in invalidURLs {
            #expect(!rssService.validateFeedURL(url))
        }
    }
    
    @Test
    func parseLargeFeed() async throws {
        let feedURL = "https://feeds.feedburner.com/TechCrunch"
        
        let channel = try await rssService.fetchAndParseFeed(from: feedURL)
        
        #expect(channel.items.count > 10)
        
        for item in channel.items.prefix(10) {
            #expect(!item.title.isEmpty)
            #expect(item.link != nil)
        }
    }
}